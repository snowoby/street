// Code generated by entc, DO NOT EDIT.

package file

import (
	"street/ent/schema"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSid holds the string denoting the sid field in the database.
	FieldSid = "sid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldMime holds the string denoting the mime field in the database.
	FieldMime = "mime"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// Table holds the table name of the file in the database.
	Table = "files"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "files"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_file"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldSid,
	FieldCreateTime,
	FieldUpdateTime,
	FieldFilename,
	FieldPath,
	FieldMime,
	FieldSize,
	FieldStatus,
	FieldNote,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "files"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_file",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSid holds the default value on creation for the "sid" field.
	DefaultSid func() schema.ID
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultFilename holds the default value on creation for the "filename" field.
	DefaultFilename string
	// FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	FilenameValidator func(string) error
	// DefaultPath holds the default value on creation for the "path" field.
	DefaultPath string
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
	// DefaultMime holds the default value on creation for the "mime" field.
	DefaultMime string
	// MimeValidator is a validator for the "mime" field. It is called by the builders before save.
	MimeValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
