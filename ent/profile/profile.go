// Code generated by entc, DO NOT EDIT.

package profile

import (
	"street/ent/schema"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSid holds the string denoting the sid field in the database.
	FieldSid = "sid"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCall holds the string denoting the call field in the database.
	FieldCall = "call"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeEpisode holds the string denoting the episode edge name in mutations.
	EdgeEpisode = "episode"
	// EdgeCommenter holds the string denoting the commenter edge name in mutations.
	EdgeCommenter = "commenter"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "profiles"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_profile"
	// EpisodeTable is the table that holds the episode relation/edge.
	EpisodeTable = "episodes"
	// EpisodeInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodeInverseTable = "episodes"
	// EpisodeColumn is the table column denoting the episode relation/edge.
	EpisodeColumn = "profile_episode"
	// CommenterTable is the table that holds the commenter relation/edge.
	CommenterTable = "comments"
	// CommenterInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommenterInverseTable = "comments"
	// CommenterColumn is the table column denoting the commenter relation/edge.
	CommenterColumn = "profile_commenter"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldSid,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTitle,
	FieldCall,
	FieldCategory,
	FieldAvatar,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSid holds the default value on creation for the "sid" field.
	DefaultSid func() schema.ID
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// CallValidator is a validator for the "call" field. It is called by the builders before save.
	CallValidator func(string) error
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	AvatarValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
