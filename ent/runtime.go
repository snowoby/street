// Code generated by entc, DO NOT EDIT.

package ent

import (
	"street/ent/account"
	"street/ent/episode"
	"street/ent/profile"
	"street/ent/schema"
	"street/ent/token"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	accountMixin := schema.Account{}.Mixin()
	accountMixinFields0 := accountMixin[0].Fields()
	_ = accountMixinFields0
	accountMixinFields1 := accountMixin[1].Fields()
	_ = accountMixinFields1
	accountFields := schema.Account{}.Fields()
	_ = accountFields
	// accountDescCreateTime is the schema descriptor for create_time field.
	accountDescCreateTime := accountMixinFields1[0].Descriptor()
	// account.DefaultCreateTime holds the default value on creation for the create_time field.
	account.DefaultCreateTime = accountDescCreateTime.Default.(func() time.Time)
	// accountDescUpdateTime is the schema descriptor for update_time field.
	accountDescUpdateTime := accountMixinFields1[1].Descriptor()
	// account.DefaultUpdateTime holds the default value on creation for the update_time field.
	account.DefaultUpdateTime = accountDescUpdateTime.Default.(func() time.Time)
	// account.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	account.UpdateDefaultUpdateTime = accountDescUpdateTime.UpdateDefault.(func() time.Time)
	// accountDescEmail is the schema descriptor for email field.
	accountDescEmail := accountFields[0].Descriptor()
	// account.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	account.EmailValidator = func() func(string) error {
		validators := accountDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// accountDescID is the schema descriptor for id field.
	accountDescID := accountMixinFields0[0].Descriptor()
	// account.DefaultID holds the default value on creation for the id field.
	account.DefaultID = accountDescID.Default.(func() uuid.UUID)
	episodeMixin := schema.Episode{}.Mixin()
	episodeMixinFields0 := episodeMixin[0].Fields()
	_ = episodeMixinFields0
	episodeMixinFields1 := episodeMixin[1].Fields()
	_ = episodeMixinFields1
	episodeFields := schema.Episode{}.Fields()
	_ = episodeFields
	// episodeDescCreateTime is the schema descriptor for create_time field.
	episodeDescCreateTime := episodeMixinFields1[0].Descriptor()
	// episode.DefaultCreateTime holds the default value on creation for the create_time field.
	episode.DefaultCreateTime = episodeDescCreateTime.Default.(func() time.Time)
	// episodeDescUpdateTime is the schema descriptor for update_time field.
	episodeDescUpdateTime := episodeMixinFields1[1].Descriptor()
	// episode.DefaultUpdateTime holds the default value on creation for the update_time field.
	episode.DefaultUpdateTime = episodeDescUpdateTime.Default.(func() time.Time)
	// episode.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	episode.UpdateDefaultUpdateTime = episodeDescUpdateTime.UpdateDefault.(func() time.Time)
	// episodeDescTitle is the schema descriptor for title field.
	episodeDescTitle := episodeFields[0].Descriptor()
	// episode.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	episode.TitleValidator = func() func(string) error {
		validators := episodeDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// episodeDescContent is the schema descriptor for content field.
	episodeDescContent := episodeFields[1].Descriptor()
	// episode.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	episode.ContentValidator = episodeDescContent.Validators[0].(func(string) error)
	// episodeDescID is the schema descriptor for id field.
	episodeDescID := episodeMixinFields0[0].Descriptor()
	// episode.DefaultID holds the default value on creation for the id field.
	episode.DefaultID = episodeDescID.Default.(func() uuid.UUID)
	profileMixin := schema.Profile{}.Mixin()
	profileMixinFields0 := profileMixin[0].Fields()
	_ = profileMixinFields0
	profileMixinFields1 := profileMixin[1].Fields()
	_ = profileMixinFields1
	profileFields := schema.Profile{}.Fields()
	_ = profileFields
	// profileDescCreateTime is the schema descriptor for create_time field.
	profileDescCreateTime := profileMixinFields1[0].Descriptor()
	// profile.DefaultCreateTime holds the default value on creation for the create_time field.
	profile.DefaultCreateTime = profileDescCreateTime.Default.(func() time.Time)
	// profileDescUpdateTime is the schema descriptor for update_time field.
	profileDescUpdateTime := profileMixinFields1[1].Descriptor()
	// profile.DefaultUpdateTime holds the default value on creation for the update_time field.
	profile.DefaultUpdateTime = profileDescUpdateTime.Default.(func() time.Time)
	// profile.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	profile.UpdateDefaultUpdateTime = profileDescUpdateTime.UpdateDefault.(func() time.Time)
	// profileDescTitle is the schema descriptor for title field.
	profileDescTitle := profileFields[0].Descriptor()
	// profile.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	profile.TitleValidator = func() func(string) error {
		validators := profileDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// profileDescCallSign is the schema descriptor for callSign field.
	profileDescCallSign := profileFields[1].Descriptor()
	// profile.CallSignValidator is a validator for the "callSign" field. It is called by the builders before save.
	profile.CallSignValidator = func() func(string) error {
		validators := profileDescCallSign.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(callSign string) error {
			for _, fn := range fns {
				if err := fn(callSign); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// profileDescCategory is the schema descriptor for category field.
	profileDescCategory := profileFields[2].Descriptor()
	// profile.CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	profile.CategoryValidator = func() func(string) error {
		validators := profileDescCategory.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(category string) error {
			for _, fn := range fns {
				if err := fn(category); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// profileDescID is the schema descriptor for id field.
	profileDescID := profileMixinFields0[0].Descriptor()
	// profile.DefaultID holds the default value on creation for the id field.
	profile.DefaultID = profileDescID.Default.(func() uuid.UUID)
	tokenMixin := schema.Token{}.Mixin()
	tokenMixinFields0 := tokenMixin[0].Fields()
	_ = tokenMixinFields0
	tokenMixinFields1 := tokenMixin[1].Fields()
	_ = tokenMixinFields1
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescCreateTime is the schema descriptor for create_time field.
	tokenDescCreateTime := tokenMixinFields1[0].Descriptor()
	// token.DefaultCreateTime holds the default value on creation for the create_time field.
	token.DefaultCreateTime = tokenDescCreateTime.Default.(func() time.Time)
	// tokenDescUpdateTime is the schema descriptor for update_time field.
	tokenDescUpdateTime := tokenMixinFields1[1].Descriptor()
	// token.DefaultUpdateTime holds the default value on creation for the update_time field.
	token.DefaultUpdateTime = tokenDescUpdateTime.Default.(func() time.Time)
	// token.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	token.UpdateDefaultUpdateTime = tokenDescUpdateTime.UpdateDefault.(func() time.Time)
	// tokenDescBody is the schema descriptor for body field.
	tokenDescBody := tokenFields[0].Descriptor()
	// token.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	token.BodyValidator = func() func(string) error {
		validators := tokenDescBody.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(body string) error {
			for _, fn := range fns {
				if err := fn(body); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescType is the schema descriptor for type field.
	tokenDescType := tokenFields[1].Descriptor()
	// token.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	token.TypeValidator = func() func(string) error {
		validators := tokenDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenMixinFields0[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() uuid.UUID)
}
